@prefix rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix rr:   <http://rdfpro.fbk.eu/ontologies/rules#> .
@prefix :     <http://www.fbk.eu/ontologies/virtualcoach#> .

<http://www.fbk.eu/ontologies/virtualcoach#> rr:prefix "".


### Checks at the end of the day if the minimum, or equal, amount of daily food (quantity, portion, or interval) has been satisfied.
### Scenarios in which these rules have been applied:
### - check_contains_activity_quantity_greater_day: if the amount of a specific activity did not reach the daily requirement.
### - check_contains_activity_quantity_less_day: if the amount of a specific activity passed the maximum daily limit.


:check_contains_activity_quantity_greater_day a rr:Rule, rr:NonFixpointRule;
    rr:phase  10;
    rr:insert """ ?v :hasViolationRule ?rule;
                     :hasViolationGoal ?goal;
                     :hasViolationUser ?user;
                     :hasViolationQuantity ?quantity;
                     :hasViolationConstraint ?operator;
                     :hasViolationEntityType ?et;
                     :hasViolationLevel ?level;
                     :hasViolationStartTime ?minTimestamp;
                     :hasViolationEndTime ?timestamp;
                     :hasTimestamp ?timestamp. """;
    rr:where  """ {
                    SELECT ?rule ?goal ?user ?et ?mv
                           (MAX(?activityTs) AS ?timestamp) (MIN(?activityTs) AS ?minTimestamp) (SUM(?entityAmount) AS ?quantity)
                    WHERE {
                      ?rule a :MonitoringRule;
                              :timing ?timing;
                              :command "contains";
                              :monitoredEntityType :Activity;
                              :hasMonitoredValue ?mv;
                              :hasOperator ?operator;
                              :monitoredEntity ?activity.
                      {FILTER EXISTS {?rule :hasOperator "equal"}} UNION {FILTER EXISTS {?rule :hasOperator "greater"}}
                      FILTER EXISTS {?rule :timing :Day}
                      {SELECT DISTINCT ?rule ?goal ?user WHERE { 
                      	#{?rule :appliesTo ?user} UNION {?rule :appliesTo/(:containsUser|^:belongsProfile) ?user}}
                      	{?rule :appliesTo ?user} UNION {?rule :appliesTo ?goal. ?goal ^:hasProfile/^:belongsProfile ?user.}}
					            }
                      ?pa :hasUserId ?user;
                          :activityStartTimestamp ?activityTs;
                          :hasActivity ?a;
                          :activityDuration ?entityAmount .
                      { ?a a ?activity . } UNION { ?a rdfs:subClassOf :Activity . }
                      {?timing rdfs:subClassOf :Timespan} UNION {?activity a ?timing}
                      BIND (:Activity AS ?et)
                      BIND (:computeTimestamp(:Day, ?activityTs) AS ?lowerTimestamp)
                      FILTER (?activityTs > ?lowerTimestamp)
                    }
                    GROUP BY ?rule ?goal ?user ?et ?mv
                  }
				          ?rule :hasOperator ?operator.
				          ?rule :hasMonitoredValue ?value. 
                  FILTER (?operator = "equal" && ?quantity != ?value ||
                          ?operator = "greater" && ?quantity < ?value)
                  ?rule :hasRuleId ?ruleId.
                  ?user :hasUserId ?userId.
                  BIND (:computeViolationLevel(?mv, ?quantity) AS ?level)
                  BIND (:mintViolation(?ruleId, ?userId, ?timestamp) AS ?v) """.
                  
                  
                  
:check_contains_activity_quantity_less_day a rr:Rule, rr:NonFixpointRule;
    rr:phase  10;
    rr:insert """ ?v :hasViolationRule ?rule;
                     :hasViolationGoal ?goal;
                     :hasViolationUser ?user;
                     :hasViolationQuantity ?quantity;
                     :hasViolationConstraint ?operator;
                     :hasViolationEntityType ?et;
                     :hasViolationLevel ?level;
                     :hasViolationStartTime ?minTimestamp;
                     :hasViolationEndTime ?timestamp;
                     :hasTimestamp ?timestamp. """;
    rr:where  """ {
                    SELECT ?rule ?goal ?user ?et ?mv
                           (MAX(?activityTs) AS ?timestamp) (MIN(?activityTs) AS ?minTimestamp) (SUM(?entityAmount) AS ?quantity)
                    WHERE {
                      ?rule a :MonitoringRule;
                              :timing ?timing;
                              :command "contains";
                              :monitoredEntityType :Activity;
                              :hasMonitoredValue ?mv;
                              :hasOperator ?operator;
                              :monitoredEntity ?activity.
                      FILTER EXISTS {?rule :hasOperator "less"}
                      FILTER EXISTS {?rule :timing :Day}
                      {SELECT DISTINCT ?rule ?goal ?user WHERE { 
                        #{?rule :appliesTo ?user} UNION {?rule :appliesTo/(:containsUser|^:belongsProfile) ?user}}
                        {?rule :appliesTo ?user} UNION {?rule :appliesTo ?goal. ?goal ^:hasProfile/^:belongsProfile ?user.}}
                      }
                      ?pa :hasUserId ?user;
                          :activityStartTimestamp ?activityTs;
                          :hasActivity ?a;
                          :activityDuration ?entityAmount.
                      { ?a a ?activity . } UNION { ?a rdfs:subClassOf :Activity . }
                      {?timing rdfs:subClassOf :Timespan} UNION {?activity a ?timing}
                      BIND (:Activity AS ?et)
                      BIND (:computeTimestamp(:Day, ?activityTs) AS ?lowerTimestamp)
                      FILTER (?activityTs > ?lowerTimestamp)
                    }
                    GROUP BY ?rule ?goal ?user ?et ?mv
                  }
				          ?rule :hasOperator ?operator.
				          ?rule :hasMonitoredValue ?value. 
                  FILTER (?operator = "less" && ?quantity >= ?value)
                  ?rule :hasRuleId ?ruleId.
                  ?user :hasUserId ?userId.
                  BIND (:computeViolationLevel(?mv, ?quantity) AS ?level)
                  BIND (:mintViolation(?ruleId, ?userId, ?timestamp) AS ?v) """.
                  
                  
                  
:check_contains_activity_missing_day a rr:Rule, rr:NonFixpointRule;
    rr:phase  10;
    rr:insert """ ?v :hasViolationRule ?rule;
                     :hasViolationGoal ?goal;
                     :hasViolationUser ?user;
                     :hasViolationQuantity ?quantity;
                     :hasViolationConstraint ?operator;
                     :hasViolationEntityType ?et;
                     :hasViolationLevel ?level;
                     :hasViolationStartTime ?minTimestamp;
                     :hasViolationEndTime ?timestamp;
                     :hasTimestamp ?timestamp. """;
    rr:where  """ {
                    SELECT ?rule ?goal ?user ?et ?mv
                           ?timestamp (MIN(?activityTs) AS ?minTimestamp) (SUM(?entityAmount) AS ?quantity)
                    WHERE {
                      ?rule a :MonitoringRule;
                              :timing ?timing;
                              :command "contains";
                              :monitoredEntityType :Activity;
                              :hasMonitoredValue ?mv;
                              :hasOperator ?operator;
                              :monitoredEntity ?activity.
                      {FILTER EXISTS {?rule :hasOperator "equal"}} UNION {FILTER EXISTS {?rule :hasOperator "greater"}}
                      FILTER EXISTS {?rule :timing :Day}
                      {SELECT DISTINCT ?rule ?goal ?user WHERE { 
                        #{?rule :appliesTo ?user} UNION {?rule :appliesTo/(:containsUser|^:belongsProfile) ?user}}
                        {?rule :appliesTo ?user} UNION {?rule :appliesTo ?goal. ?goal ^:hasProfile/^:belongsProfile ?user.}}
                      }
                      FILTER NOT EXISTS {
                        ?pa :hasUserId ?user;
                            :hasActivity ?a;
                            a :PerformedActivity.
                         ?a a ?activity.
                      }
                      #    :activityStartTimestamp ?activityTs;
                      #    :hasActivity ?a;
                      #    :activityDuration ?entityAmount .
                      #{ ?a a ?activity . } UNION { ?a rdfs:subClassOf :Activity . }
                      #{?timing rdfs:subClassOf :Timespan} UNION {?activity a ?timing}
                      BIND (:Activity AS ?et)
                      BIND (:computeTimestamp(:Now, ?activityTs) AS ?timestamp)
                      #FILTER (?activityTs > ?lowerTimestamp)
                    }
                    GROUP BY ?rule ?goal ?user ?et ?mv ?timestamp
                  }
                  ?rule :hasOperator ?operator.
                  ?rule :hasMonitoredValue ?value. 
                  FILTER (?operator = "equal" && ?quantity != ?value ||
                          ?operator = "greater" && ?quantity < ?value)
                  ?rule :hasRuleId ?ruleId.
                  ?user :hasUserId ?userId.
                  BIND (:computeViolationLevel(?mv, ?quantity) AS ?level)
                  BIND (:mintViolation(?ruleId, ?userId, ?timestamp) AS ?v) """.