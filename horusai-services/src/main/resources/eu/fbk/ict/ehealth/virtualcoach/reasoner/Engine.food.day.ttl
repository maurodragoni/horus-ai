@prefix rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix rr:   <http://rdfpro.fbk.eu/ontologies/rules#> .
@prefix :     <http://www.fbk.eu/ontologies/virtualcoach#> .

<http://www.fbk.eu/ontologies/virtualcoach#> rr:prefix "".


### Checks at the end of the day if the minimum, or equal, amount of daily food (quantity, portion, or interval) has been satisfied.
### Scenarios in which these rules have been applied:
### - check_contains_food_quantity_greater_day: if the amount of a specific food did not reach the daily requirement.
### - check_contains_food_portion_greater_day: if the number of portions of a specific food did not reach the daily requirement.
### - check_contains_food_portion_missing_day: if the specific food has not been consumed during the current day.
### - check_contains_food_quantity_greater_interval_day: if the amount of a specific food did not reach the daily lower bound requirement.
### - check_contains_food_portion_greater_interval_day: if the number of portions of a specific food did not reach the daily lower bound requirement.
### - check_contains_food_portion_missing_interval_day: if the specific food has not been consumed during the current day.
### - check_contains_meal_type_missing_day: if the user consumed a specific meal type during the current day.


:check_contains_food_quantity_greater_day a rr:Rule, rr:NonFixpointRule;
    rr:phase  10;
    rr:insert """ ?v :hasViolationRule ?rule;
                     :hasViolationGoal ?goal;
                     :hasViolationUser ?user;
                     :hasViolationQuantity ?quantity;
                     :hasViolationConstraint ?operator;
                     :hasViolationEntityType ?et;
                     :hasViolationLevel ?level;
                     :hasViolationStartTime ?minTimestamp;
                     :hasViolationEndTime ?timestamp;
                     :hasTimestamp ?timestamp. """;
    rr:where  """ {
                    SELECT ?rule ?goal ?user ?et ?mv
                           (MAX(?mealTs) AS ?timestamp) (MIN(?mealTs) AS ?minTimestamp) (SUM(?entityAmount) AS ?quantity)
                    WHERE {
                      ?rule a :MonitoringRule;
                              :timing ?timing;
                              :command "contains";
                              :monitoredEntityType :Food;
                              :hasMonitoredValue ?mv;
                              :hasOperator ?operator;
                              :monitoredEntity ?class.
                      {FILTER EXISTS {?rule :hasOperator "equal"}} UNION {FILTER EXISTS {?rule :hasOperator "greater"}}
                      #FILTER EXISTS {?rule :hasOperator "equal"}
                      #FILTER EXISTS {?rule :hasOperator "greater"}
                      FILTER EXISTS {?rule :timing :Day}
                      {SELECT DISTINCT ?rule ?goal ?user WHERE { 
                        #{?rule :appliesTo ?user} UNION {?rule :appliesTo/(:containsUser|^:belongsProfile) ?user}}
                        {?rule :appliesTo ?user} UNION {?rule :appliesTo ?goal. ?goal ^:hasProfile/^:belongsProfile ?user.}}
                      }
                      ?meal :hasUser|^:consumed ?user;
                            :hasTimestamp ?mealTs.
                      {?timing rdfs:subClassOf :Timespan} UNION {?meal a ?timing}
					            BIND (:mintEntityType(?class) AS ?et)
					            BIND (:computeTimestamp(:Day, ?mealTs) AS ?lowerTimestamp)
                      FILTER (?mealTs > ?lowerTimestamp)
                      ?cf   ^:hasConsumedFood ?meal; :hasFood ?food; :amountFood ?entityAmount.
                      ?food a ?class.
                    }
                    GROUP BY ?rule ?goal ?user ?et ?mv
                  }
                  ?rule :hasOperator ?operator.
				          ?rule :hasMonitoredValue ?value. 
                  FILTER (?operator = "equal" && ?quantity != ?value ||
                          ?operator = "greater" && ?quantity < ?value)
                  ?rule :hasRuleId ?ruleId.
                  ?user :hasUserId ?userId.
                  BIND (:computeViolationLevel(?mv, ?quantity) AS ?level)
                  BIND (:mintViolation(?ruleId, ?userId, ?timestamp) AS ?v) """.
                  
                  
                  
:check_contains_food_portion_greater_day a rr:Rule, rr:NonFixpointRule;
    rr:phase  10;
    rr:insert """ ?v :hasViolationRule ?rule;
                     :hasViolationGoal ?goal;
                     :hasViolationUser ?user;
                     :hasViolationQuantity ?quantity;
                     :hasViolationConstraint ?operator;
                     :hasViolationEntityType ?et;
                     :hasViolationLevel ?level;
                     :hasViolationStartTime ?minTimestamp;
                     :hasViolationEndTime ?timestamp;
                     :hasTimestamp ?timestamp. """;
    rr:where  """ {
                    SELECT ?rule ?goal ?user ?et ?mv
                           (MAX(?mealTs) AS ?timestamp) (MIN(?mealTs) AS ?minTimestamp) (COUNT(DISTINCT ?cf) AS ?quantity)
                    WHERE {
                      ?rule a :MonitoringRule;
                              :timing ?timing;
                              :command "portion";
                              :monitoredEntityType :Food;
                              :hasMonitoredValue ?mv;
                              :monitoredEntity ?class.
                      {FILTER EXISTS {?rule :hasOperator "equal"}} UNION {FILTER EXISTS {?rule :hasOperator "greater"}}
                      #FILTER EXISTS {?rule :hasOperator "equal"}
                      #FILTER EXISTS {?rule :hasOperator "greater"}
                      FILTER EXISTS {?rule :timing :Day}
                      {SELECT DISTINCT ?rule ?goal ?user WHERE { 
                        #{?rule :appliesTo ?user} UNION {?rule :appliesTo/(:containsUser|^:belongsProfile) ?user}}
                        {?rule :appliesTo ?user} UNION {?rule :appliesTo ?goal. ?goal ^:hasProfile/^:belongsProfile ?user.}}
                      }
                      ?meal :hasUser|^:consumed ?user;
                            :hasTimestamp ?mealTs.
                      {?timing rdfs:subClassOf :Timespan} UNION {?meal a ?timing}
					            BIND (:mintEntityType(?class) AS ?et)
					            BIND (:computeTimestamp(:Day, ?mealTs) AS ?lowerTimestamp)
                      FILTER (?mealTs > ?lowerTimestamp)
                      ?cf   ^:hasConsumedFood ?meal . 
                      #?cf :hasFood ?food.
                      #?food a ?class.
                      {?cf :hasFood ?food . ?food a ?class .} UNION {?cf :hasFood ?class .}
                    }
                    GROUP BY ?rule ?goal ?user ?et ?mv
                  }
				          ?rule :hasOperator ?operator.
				          ?rule :hasMonitoredValue ?value. 
				          FILTER ((?operator = "equal" && ?quantity != ?value) ||
                          (?operator = "greater" && ?quantity < ?value))
                  ?rule :hasRuleId ?ruleId.
                  ?user :hasUserId ?userId.
                  BIND (:computeViolationLevel(?mv, ?quantity) AS ?level)
                  BIND (:mintViolation(?ruleId, ?userId, ?timestamp) AS ?v) """.



:check_contains_food_portion_missing_day a rr:Rule, rr:NonFixpointRule;
    rr:phase  10;
    rr:insert """ ?v :hasViolationRule ?rule;
                     :hasViolationGoal ?goal;
                     :hasViolationUser ?user;
                     :hasViolationQuantity ?quantity;
                     :hasViolationConstraint ?operator;
                     :hasViolationEntityType ?et;
                     :hasViolationLevel ?level;
                     :hasViolationStartTime ?minTimestamp;
                     :hasViolationEndTime ?timestamp;
                     :hasTimestamp ?timestamp. """;
    rr:where  """ {
                    SELECT ?rule ?goal ?user ?et ?mv
                           ?timestamp (MIN(?mealTs) AS ?minTimestamp) (COUNT(DISTINCT ?cf) AS ?quantity)
                    WHERE {
                      ?rule a :MonitoringRule;
                              :timing :Day;
                              :command "portion";
                              :monitoredEntityType :Food;
                              :hasMonitoredValue ?mv;
                              :hasOperator ?operator;
                              :monitoredEntity ?class.
                      {FILTER EXISTS {?rule :hasOperator "equal"}} UNION {FILTER EXISTS {?rule :hasOperator "greater"}}
                      #FILTER NOT EXISTS {?rule :hasOperator "less"}
                      #FILTER NOT EXISTS {?rule :hasOperator "percentage"}
                      #FILTER NOT EXISTS {?rule :hasOperator "interval"}
                      {SELECT DISTINCT ?rule ?goal ?user WHERE { 
                        #{?rule :appliesTo ?user} UNION {?rule :appliesTo/(:containsUser|^:belongsProfile) ?user}}
                        {?rule :appliesTo ?user} UNION {?rule :appliesTo ?goal. ?goal ^:hasProfile/^:belongsProfile ?user.}}
                      }
                      ?meal :hasUser|^:consumed ?user;
                            :hasTimestamp ?mealTs.
                      {?timing rdfs:subClassOf :Timespan} UNION {?meal a ?timing}
                      BIND (:mintEntityType(?class) AS ?et)
                      BIND (:computeTimestamp(:Now, 0) AS ?timestamp)
                      #FILTER (?mealTs > ?lowerTimestamp)
                      FILTER NOT EXISTS {  
                        ?cf   ^:hasConsumedFood ?meal; 
                               :hasFood ?food .
                        ?food a ?class.
                      }
                    }
                    GROUP BY ?rule ?goal ?user ?et ?mv ?timestamp
                  }
                  ?rule :hasOperator ?operator.
                  ?rule :hasMonitoredValue ?value.
                  FILTER (?operator = "equal" || ?operator = "greater")
                  ?rule :hasRuleId ?ruleId.
                  ?user :hasUserId ?userId.
                  BIND (:computeViolationLevel(?mv, 0) AS ?level)
                  BIND (:mintViolation(?ruleId, ?userId, ?timestamp) AS ?v) """.
                  
                  
                  
:check_contains_meal_type_missing_day a rr:Rule, rr:NonFixpointRule;
    rr:phase  10;
    rr:insert """ ?v :hasViolationRule ?rule;
                     :hasViolationGoal ?goal;
                     :hasViolationUser ?user;
                     :hasViolationQuantity ?quantity;
                     :hasViolationConstraint ?operator;
                     :hasViolationEntityType ?et;
                     :hasViolationLevel ?level;
                     :hasViolationStartTime ?minTimestamp;
                     :hasViolationEndTime ?timestamp;
                     :hasTimestamp ?timestamp. """;
    rr:where  """ {
                    SELECT ?rule ?goal ?user ?et ?mv
                           ?timestamp (MIN(?mealTs) AS ?minTimestamp) ?quantity
                    WHERE {
                      ?rule a :MonitoringRule;
                              :timing :Day;
                              :command "portion";
                              :monitoredEntityType :Meal;
                              :hasMonitoredValue ?mv;
                              :hasOperator ?operator;
                              :monitoredEntity ?class.
                      {FILTER EXISTS {?rule :hasOperator "equal"}} UNION {FILTER EXISTS {?rule :hasOperator "greater"}}
                      {SELECT DISTINCT ?rule ?goal ?user WHERE { 
                        {?rule :appliesTo ?user} UNION {?rule :appliesTo ?goal. ?goal ^:hasProfile/^:belongsProfile ?user.}}
                      }
                      {SELECT (COUNT(DISTINCT ?bm) AS ?quantity) WHERE {?bm :hasUser|^:consumed ?ubm; a :Breakfast .}}
                      ?meal :hasUser|^:consumed ?user;
                            :hasTimestamp ?mealTs.
                      {?timing rdfs:subClassOf :Timespan} UNION {?meal a ?timing}
                      BIND (:mintEntityType(?class) AS ?et)
                      BIND (:computeTimestamp(:Day, ?mealTs) AS ?lowerTimestamp)
                      BIND (:computeTimestamp(:Now, 0) AS ?timestamp)
                      FILTER (?mealTs > ?lowerTimestamp)
                      #FILTER NOT EXISTS {
                      #  ?meal a ?class.
                      #}
                    }
                    GROUP BY ?rule ?goal ?user ?et ?mv ?quantity ?timestamp
                  }
                  ?rule :hasOperator ?operator.
                  ?rule :hasMonitoredValue ?value.
                  FILTER ((?operator = "equal" && ?quantity != ?value) ||
                          (?operator = "greater" && ?quantity < ?value))
                  ?rule :hasRuleId ?ruleId.
                  ?user :hasUserId ?userId.
                  BIND (:computeViolationLevel(?mv, 0) AS ?level)
                  BIND (:mintViolation(?ruleId, ?userId, ?timestamp) AS ?v) """.
                  
                  
####################################################################################################################


:check_contains_food_quantity_greater_interval_day a rr:Rule, rr:NonFixpointRule;
    rr:phase  10;
    rr:insert """ ?v :hasViolationRule ?rule;
                     :hasViolationGoal ?goal;
                     :hasViolationUser ?user;
                     :hasViolationQuantity ?quantity;
                     :hasViolationConstraint ?operator;
                     :hasViolationEntityType ?et;
                     :hasViolationLevel ?level;
                     :hasViolationStartTime ?minTimestamp;
                     :hasViolationEndTime ?timestamp;
                     :hasTimestamp ?timestamp. """;
    rr:where  """ {
                    SELECT ?rule ?goal ?user ?et
                           (MAX(?mealTs) AS ?timestamp) (MIN(?mealTs) AS ?minTimestamp) (SUM(?entityAmount) AS ?quantity)
                    WHERE {
                      ?rule a :MonitoringRule;
                              :timing ?timing;
                              :command "contains";
                              :monitoredEntityType :Food;
                              :hasOperator ?operator;
                              :monitoredEntity ?class.
                      FILTER EXISTS {?rule :hasOperator "interval"}
                      FILTER EXISTS {?rule :timing :Day}
                      {SELECT DISTINCT ?rule ?goal ?user WHERE { 
                        #{?rule :appliesTo ?user} UNION {?rule :appliesTo/(:containsUser|^:belongsProfile) ?user}}
                        {?rule :appliesTo ?user} UNION {?rule :appliesTo ?goal. ?goal ^:hasProfile/^:belongsProfile ?user.}}
                      }
                      ?meal :hasUser|^:consumed ?user;
                            :hasTimestamp ?mealTs.
                      {?timing rdfs:subClassOf :Timespan} UNION {?meal a ?timing}
					            BIND (:mintEntityType(?class) AS ?et)
					            BIND (:computeTimestamp(:Day, ?mealTs) AS ?lowerTimestamp)
                      FILTER (?mealTs > ?lowerTimestamp)
                      ?cf   ^:hasConsumedFood ?meal; :hasFood ?food; :amountFood ?entityAmount.
                      ?food a ?class.
                    }
                    GROUP BY ?rule ?goal ?user ?et
                  }
				          ?rule :hasOperator ?operator.
				          ?rule :hasMonitoredValueInterval ?interval.
                  ?interval :lowerBound ?value.
                  FILTER (?operator = "interval" && ?quantity < ?value)
                  ?rule :hasRuleId ?ruleId.
                  ?user :hasUserId ?userId.
                  BIND (:computeViolationLevel(?value, ?quantity) AS ?level)
                  BIND (:mintViolation(?ruleId, ?userId, ?timestamp) AS ?v) """.
                  
                  
                  
:check_contains_food_portion_greater_interval_day a rr:Rule, rr:NonFixpointRule;
    rr:phase  10;
    rr:insert """ ?v :hasViolationRule ?rule;
                     :hasViolationGoal ?goal;
                     :hasViolationUser ?user;
                     :hasViolationQuantity ?quantity;
                     :hasViolationConstraint ?operator;
                     :hasViolationEntityType ?et;
                     :hasViolationLevel ?level;
                     :hasViolationStartTime ?minTimestamp;
                     :hasViolationEndTime ?timestamp;
                     :hasTimestamp ?timestamp. """;
    rr:where  """ {
                    SELECT ?rule ?goal ?user ?et
                           (MAX(?mealTs) AS ?timestamp) (MIN(?mealTs) AS ?minTimestamp) (COUNT(DISTINCT ?cf) AS ?quantity)
                    WHERE {
                      ?rule a :MonitoringRule;
                              :timing ?timing;
                              :command "portion";
                              :monitoredEntityType :Food;
                              :monitoredEntity ?class.
                      FILTER EXISTS {?rule :hasOperator "interval"}
                      FILTER EXISTS {?rule :timing :Day}
                      {SELECT DISTINCT ?rule ?goal ?user WHERE { 
                        #{?rule :appliesTo ?user} UNION {?rule :appliesTo/(:containsUser|^:belongsProfile) ?user}}
                        {?rule :appliesTo ?user} UNION {?rule :appliesTo ?goal. ?goal ^:hasProfile/^:belongsProfile ?user.}}
                      }
                      ?meal :hasUser|^:consumed ?user;
                            :hasTimestamp ?mealTs.
                      {?timing rdfs:subClassOf :Timespan} UNION {?meal a ?timing}
					            BIND (:mintEntityType(?class) AS ?et)
					            BIND (:computeTimestamp(:Day, ?mealTs) AS ?lowerTimestamp)
                      FILTER (?mealTs > ?lowerTimestamp)
                      ?cf   ^:hasConsumedFood ?meal; :hasFood ?food.
                      ?food a ?class.
                    }
                    GROUP BY ?rule ?goal ?user ?et
                  }
				          ?rule :hasOperator ?operator.
				          ?rule :hasMonitoredValueInterval ?interval.
                  ?interval :lowerBound ?value.
				          FILTER (?operator = "interval" && ?quantity < ?value)
                  ?rule :hasRuleId ?ruleId.
                  ?user :hasUserId ?userId.
                  BIND (:computeViolationLevel(?value, ?quantity) AS ?level)
                  BIND (:mintViolation(?ruleId, ?userId, ?timestamp) AS ?v) """.



:check_contains_food_portion_missing_interval_day a rr:Rule, rr:NonFixpointRule;
    rr:phase  10;
    rr:insert """ ?v :hasViolationRule ?rule;
                     :hasViolationGoal ?goal;
                     :hasViolationUser ?user;
                     :hasViolationQuantity ?quantity;
                     :hasViolationConstraint ?operator;
                     :hasViolationEntityType ?et;
                     :hasViolationLevel ?level;
                     :hasViolationStartTime ?minTimestamp;
                     :hasViolationEndTime ?timestamp;
                     :hasTimestamp ?timestamp. """;
    rr:where  """ {
                    SELECT ?rule ?goal ?user ?et
                           (MAX(?mealTs) AS ?timestamp) (MIN(?mealTs) AS ?minTimestamp) (COUNT(DISTINCT ?cf) AS ?quantity)
                    WHERE {
                      ?rule a :MonitoringRule;
                              :timing :Day;
                              :command "portion";
                              :monitoredEntityType :Food;
                              :hasOperator ?operator;
                              :monitoredEntity ?class.
                      FILTER EXISTS {?rule :hasOperator "interval"}
                      {SELECT DISTINCT ?rule ?goal ?user WHERE { 
                        #{?rule :appliesTo ?user} UNION {?rule :appliesTo/(:containsUser|^:belongsProfile) ?user}}
                        {?rule :appliesTo ?user} UNION {?rule :appliesTo ?goal. ?goal ^:hasProfile/^:belongsProfile ?user.}}
                      }
                      ?meal :hasUser|^:consumed ?user;
                            :hasTimestamp ?mealTs.
                      {?timing rdfs:subClassOf :Timespan} UNION {?meal a ?timing}
					            BIND (:mintEntityType(?class) AS ?et)
					            BIND (:computeTimestamp(:Day, ?mealTs) AS ?lowerTimestamp)
                      FILTER (?mealTs > ?lowerTimestamp)
                      FILTER NOT EXISTS {
                      	?cf   ^:hasConsumedFood ?meal; 
                      	       :hasFood ?food.
                      	?food a ?class.
                      }
                    }
                    GROUP BY ?rule ?goal ?user ?et
                  }
				          ?rule :hasOperator ?operator.
				          ?rule :hasMonitoredValueInterval ?interval.
                  ?interval :lowerBound ?value.
                  FILTER (?operator = "interval")
                  ?rule :hasRuleId ?ruleId.
                  ?user :hasUserId ?userId.
                  BIND (:computeViolationLevel(?value, 0) AS ?level)
                  BIND (:mintViolation(?ruleId, ?userId, ?timestamp) AS ?v) """.