@prefix rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix rr:   <http://rdfpro.fbk.eu/ontologies/rules#> .
@prefix :     <http://www.fbk.eu/ontologies/2016/virtualcoach/v1#> .

<http://www.fbk.eu/ontologies/2016/virtualcoach/v1#> rr:prefix "".


:check_has_calories a rr:Rule, rr:NonFixpointRule;
    rr:phase  16;
    rr:insert """ ?v :hasViolationRule ?rule;
                     :hasViolationUser ?user;
                     :hasViolationQuantity ?calories;
                     :hasTimestamp ?timestamp. """;
    rr:where  """ {
                    SELECT ?rule ?user ?timestamp (SUM(?a / ?e * ?fc) AS ?calories)
                    WHERE {
                      ?rule a :MonitoringRule;
                            :timing ?timing;
                            :command "hasCalories".
                      { ?rule :appliesTo ?user } UNION { ?rule :appliesTo/:containsUser ?user }
                      ?meal :hasUser|^:consumed ?user;
                            :hasTimestamp ?mealTs.
                      { ?timing rdfs:subClassOf :Timespan } UNION { ?meal a ?timing }
                      BIND (:computeTimestamp(?timing, ?mealTs) AS ?timestamp)
                      ?cf ^:hasConsumedFood ?meal; :amountFood ?a; :hasFood ?food.
                      ?food :amountCalories ?fc; :ediblePart ?e.
                    }
                    GROUP BY ?rule ?user ?timestamp
                  }
                  ?rule :hasOperator ?operator.
                  OPTIONAL { ?rule :hasMonitoredValue ?value }
                  OPTIONAL { ?rule :hasMonitoredValueInterval ?interval.
                             ?interval :lowerBound ?lower;
                                       :upperBound ?upper. }
                  FILTER (?operator = "equal" && ?calories != ?value ||
                          ?operator = "less" && ?calories >= ?value ||
                          ?operator = "greater" && ?calories <= ?value ||
                          ?operator = "interval" && (?calories < ?lower || ?calories > ?upper))
                  ?rule :hasRuleId ?ruleId.
                  ?user :hasUserId ?userId.
                  BIND (:mintViolation(?ruleId, ?userId, ?timestamp) AS ?v) """.

:check_not_contains_nutrient a rr:Rule, rr:NonFixpointRule;
    rr:phase  15;
    rr:insert """ ?v :hasViolationRule ?rule;
                     :hasViolationUser ?user;
                     :hasViolationQuantity ?quantity;
                     :hasTimestamp ?timestamp. """;
    rr:where  """ {
                    SELECT ?rule ?user ?timestamp
                           (SUM(?a / ?e * ?na) AS ?quantity)
                    WHERE {
                      ?rule a :MonitoringRule;
                            :timing ?timing;
                            :command "notContains";
                            :monitoredEntityType :Nutrient;
                            :monitoredEntity ?class.
                      { ?rule :appliesTo ?user } UNION { ?rule :appliesTo/(:containsUser|^:belongsProfile) ?user }
                      ?meal :hasUser|^:consumed ?user;
                            :hasTimestamp ?mealTs.
                      { ?timing rdfs:subClassOf :Timespan } UNION { ?meal a ?timing }
                      BIND (:computeTimestamp(?timing, ?mealTs) AS ?timestamp)
                      ?cf ^:hasConsumedFood ?meal; :amountFood ?a; :hasFood ?food.
                      ?food :hasNutrient ?nutrient; :ediblePart ?e.
                      ?nutrient :directType ?class; :amountNutrient ?na.
                    }
                    GROUP BY ?rule ?user ?timestamp
                  }
                  ?rule :hasRuleId ?ruleId.
                  ?user :hasUserId ?userId.
                  BIND (:mintViolation(?ruleId, ?userId, ?timestamp) AS ?v) """.

:check_not_contains_food a rr:Rule, rr:NonFixpointRule;
    rr:phase  14;
    rr:insert """ ?v :hasViolationRule ?rule;
                     :hasViolationUser ?user;
                     :hasViolationQuantity ?quantity;
                     :hasTimestamp ?timestamp. """;
    rr:where  """ {
                    SELECT ?rule ?user ?timestamp
                           (SUM(?entityAmount) AS ?quantity)
                    WHERE {
                      ?rule a :MonitoringRule;
                            :timing ?timing;
                            :command "notContains";
                            :monitoredEntityType :Food;
                            :monitoredEntity ?class.
                      { ?rule :appliesTo ?user } UNION { ?rule :appliesTo/(:containsUser|^:belongsProfile) ?user }
                      ?meal :hasUser|^:consumed ?user;
                            :hasTimestamp ?mealTs;
                      { ?timing rdfs:subClassOf :Timespan } UNION { ?meal a ?timing }
                      BIND (:computeTimestamp(?timing, ?mealTs) AS ?timestamp)
                      ?cf   ^:hasConsumedFood ?meal; :hasFood ?food; :amountFood ?entityAmount.
                      ?food a ?class.
                    }
                    GROUP BY ?rule ?user ?timestamp
                  }
                  ?rule :hasRuleId ?ruleId.
                  ?user :hasUserId ?userId.
                  BIND (:mintViolation(?ruleId, ?userId, ?timestamp) AS ?v) """.
                    
:check_contains_nutrient_percentage a rr:Rule, rr:NonFixpointRule;
    rr:phase  13;
    rr:insert """ ?v :hasViolationRule ?rule;
                     :hasViolationUser ?user;
                     :hasViolationQuantity ?quantity;
                     :hasTimestamp ?timestamp. """;
    rr:where  """ {
                    SELECT ?rule ?user ?timestamp
                           (SUM(COALESCE(?a / ?e * ?na, 0)) / SUM(?a) * 100 AS ?quantity)
                    WHERE {
                      ?rule a :MonitoringRule;
                            :timing ?timing;
                            :command "contains";
                            :hasOperator "percentage";
                            :monitoredEntityType :Nutrient;
                            :monitoredEntity ?class.
                      { ?rule :appliesTo ?user } UNION { ?rule :appliesTo/(:containsUser|^:belongsProfile) ?user }
                      ?meal :hasUser|^:consumed ?user;
                            :hasTimestamp ?mealTs.
                      { ?timing rdfs:subClassOf :Timespan } UNION { ?meal a ?timing }
                      BIND (:computeTimestamp(?timing, ?mealTs) AS ?timestamp)
                      ?cf ^:hasConsumedFood ?meal; :amountFood ?a.
                      OPTIONAL {
                        ?food ^:hasFood ?cf; :hasNutrient ?nutrient; :ediblePart ?e.
                        ?nutrient :directType ?class; :amountNutrient ?na
                      }
                    }
                    GROUP BY ?rule ?user ?timestamp
                  }
                  ?rule :hasMonitoredValue ?value.
                  FILTER (?quantity > ?value)
                  ?rule :hasRuleId ?ruleId.
                  ?user :hasUserId ?userId.
                  BIND (:mintViolation(?ruleId, ?userId, ?timestamp) AS ?v) """.
                           
:check_contains_nutrient_other a rr:Rule, rr:NonFixpointRule;
    rr:phase  12;
    rr:insert """ ?v :hasViolationRule ?rule;
                     :hasViolationUser ?user;
                     :hasViolationQuantity ?quantity;
                     :hasTimestamp ?timestamp. """;
    rr:where  """ {
                    SELECT ?rule ?user ?timestamp
                           (SUM(?a / ?e * ?na) AS ?quantity)
                    WHERE {
                      ?rule a :MonitoringRule;
                            :timing ?timing;
                            :command "contains";
                            :monitoredEntityType :Nutrient;
                            :monitoredEntity ?class.
                      FILTER NOT EXISTS { ?rule :hasOperator "percentage" }
                      { ?rule :appliesTo ?user } UNION { ?rule :appliesTo/(:containsUser|^:belongsProfile) ?user }
                      ?meal :hasUser|^:consumed ?user;
                            :hasTimestamp ?mealTs.
                      { ?timing rdfs:subClassOf :Timespan } UNION { ?meal a ?timing }
                      BIND (:computeTimestamp(?timing, ?mealTs) AS ?timestamp)
                      ?cf ^:hasConsumedFood ?meal; :amountFood ?a; :hasFood ?food.
                      ?food :hasNutrient ?nutrient; :ediblePart ?e.
                      ?nutrient :directType ?class; :amountNutrient ?na.
                    }
                    GROUP BY ?rule ?user ?timestamp
                  }
                  ?rule :hasOperator ?operator.
                  OPTIONAL { ?rule :hasMonitoredValue ?value }
                  OPTIONAL { ?rule :hasMonitoredValueInterval ?interval.
                             ?interval :lowerBound ?lower;
                                       :upperBound ?upper. }
                  FILTER (?operator = "equal" && ?quantity != ?value ||
                          ?operator = "less" && ?quantity >= ?value ||
                          ?operator = "greater" && ?quantity <= ?value ||
                          ?operator = "interval" && (?quantity < ?lower || ?quantity > ?upper))
                  ?rule :hasRuleId ?ruleId.
                  ?user :hasUserId ?userId.
                  BIND (:mintViolation(?ruleId, ?userId, ?timestamp) AS ?v) """.

                           
:check_contains_food_percentage a rr:Rule, rr:NonFixpointRule;
    rr:phase  11;
    rr:insert """ ?v :hasViolationRule ?rule;
                     :hasViolationUser ?user;
                     :hasViolationQuantity ?quantity;
                     :hasTimestamp ?timestamp. """;
    rr:where  """ {
                    SELECT ?rule ?user ?timestamp
                           (SUM(COALESCE(?f, 0)) / SUM(?a) * 100 AS ?quantity)
                    WHERE {
                      ?rule a :MonitoringRule;
                            :timing ?timing;
                            :command "contains";
                            :hasOperator "percentage";
                            :monitoredEntityType :Food;
                            :monitoredEntity ?class.
                      { ?rule :appliesTo ?user } UNION { ?rule :appliesTo/(:containsUser|^:belongsProfile) ?user }
                      ?meal :hasUser|^:consumed ?user;
                            :hasTimestamp ?mealTs.
                      { ?timing rdfs:subClassOf :Timespan } UNION { ?meal a ?timing }
                      BIND (:computeTimestamp(?timing, ?mealTs) AS ?timestamp)                      
                      ?cf ^:hasConsumedFood ?meal; :amountFood ?a.
                      OPTIONAL {
                        ?food a ?class; ^:hasFood ?cf.
                        BIND (?a AS ?f)
                      }
                    }
                    GROUP BY ?rule ?user ?timestamp
                  }
                  ?rule :hasMonitoredValue ?value.
                  FILTER (?quantity > ?value)
                  ?rule :hasRuleId ?ruleId.
                  ?user :hasUserId ?userId.
                  BIND (:mintViolation(?ruleId, ?userId, ?timestamp) AS ?v) """.
                           
                           
:check_contains_food_other a rr:Rule, rr:NonFixpointRule;
    rr:phase  10;
    rr:insert """ ?v :hasViolationRule ?rule;
                     :hasViolationUser ?user;
                     :hasViolationQuantity ?quantity;
                     :hasTimestamp ?timestamp. """;
    rr:where  """ {
                    SELECT ?rule ?user ?timestamp
                           (SUM(?entityAmount) AS ?quantity)
                    WHERE {
                      ?rule a :MonitoringRule;
                            :timing ?timing;
                            :command "contains";
                            :monitoredEntityType :Food;
                            :monitoredEntity ?class.
                      FILTER NOT EXISTS { ?rule :hasOperator "percentage" }
                      { ?rule :appliesTo ?user } UNION { ?rule :appliesTo/(:containsUser|^:belongsProfile) ?user }
                      ?meal :hasUser|^:consumed ?user;
                            :hasTimestamp ?mealTs.
                      { ?timing rdfs:subClassOf :Timespan } UNION { ?meal a ?timing }
                      BIND (:computeTimestamp(?timing, ?mealTs) AS ?timestamp)                      
                      ?cf   ^:hasConsumedFood ?meal; :hasFood ?food; :amountFood ?entityAmount.
                      ?food a ?class.
                    }
                    GROUP BY ?rule ?user ?timestamp
                  }
                  ?rule :hasOperator ?operator.
                  OPTIONAL { ?rule :hasMonitoredValue ?value }
                  OPTIONAL { ?rule :hasMonitoredValueInterval ?interval.
                             ?interval :lowerBound ?lower;
                                       :upperBound ?upper. }
                  FILTER (?operator = "equal" && ?quantity != ?value ||
                          ?operator = "less" && ?quantity >= ?value ||
                          ?operator = "greater" && ?quantity <= ?value ||
                          ?operator = "interval" && (?quantity < ?lower || ?quantity > ?upper))
                  ?rule :hasRuleId ?ruleId.
                  ?user :hasUserId ?userId.
                  BIND (:mintViolation(?ruleId, ?userId, ?timestamp) AS ?v) """.
