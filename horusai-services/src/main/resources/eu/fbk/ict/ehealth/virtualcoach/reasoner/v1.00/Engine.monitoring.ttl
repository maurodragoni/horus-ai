@prefix rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix rr:   <http://rdfpro.fbk.eu/ontologies/rules#> .
@prefix :     <http://www.fbk.eu/ontologies/2016/virtualcoach/v1#> .

<http://www.fbk.eu/ontologies/2016/virtualcoach/v1#> rr:prefix "".

# { ?rule :appliesTo ?user } UNION { ?rule :appliesTo/(:containsUser|^:belongsProfile) ?user }
# BIND (:computeTimestamp(?timing, ?mealTs) AS ?timestamp)


:check_contains_food_quantity_less_day a rr:Rule, rr:NonFixpointRule;
    rr:phase  10;
    rr:insert """ ?v :hasViolationRule ?rule;
                     :hasViolationUser ?user;
                     :hasViolationQuantity ?quantity;
					 :hasViolationConstraint ?operator;
					 :hasViolationEntityType ?et;
					 :hasViolationLevel ?level;
					 :hasViolationStartTime ?minTimestamp;
					 :hasViolationEndTime ?timestamp;
                     :hasTimestamp ?timestamp. """;
    rr:where  """ {
                    SELECT ?rule ?user ?et ?mv
                           (MAX(?mealTs) AS ?timestamp) (MIN(?mealTs) AS ?minTimestamp) (SUM(?entityAmount) AS ?quantity)
                    WHERE {
                      ?rule a :MonitoringRule;
                            :timing ?timing;
                            :command "contains";
                            :monitoredEntityType :Food;
                            :hasMonitoredValue ?mv;
                            :hasOperator ?operator;
                            :monitoredEntity ?class.
                      FILTER EXISTS {?rule :hasOperator "less"}
                      FILTER EXISTS {?rule :timing :Day}
                      {SELECT DISTINCT ?rule ?user WHERE { 
                      	{?rule :appliesTo ?user} UNION {?rule :appliesTo/(:containsUser|^:belongsProfile) ?user}}
					  }
                      ?meal :hasUser|^:consumed ?user;
                            :hasTimestamp ?mealTs.
                      { ?timing rdfs:subClassOf :Timespan } UNION { ?meal a ?timing }
					  BIND (:mintEntityType(?class) AS ?et)
                      ?cf   ^:hasConsumedFood ?meal; :hasFood ?food; :amountFood ?entityAmount.
                      ?food a ?class.
                    }
                    GROUP BY ?rule ?user ?et ?mv
                  }
				  ?rule :hasOperator ?operator.
				  { 
					?rule :hasMonitoredValue ?value. 
                  }
				  UNION 
 				  {
				    ?rule :hasMonitoredValueInterval ?interval.
                    ?interval :lowerBound ?lower;
                              :upperBound ?upper.
                  }
                  FILTER (?quantity > ?value)
                  ?rule :hasRuleId ?ruleId.
                  ?user :hasUserId ?userId.
                  BIND (:computeViolationLevel(?mv, ?quantity) AS ?level)
                  BIND (:mintViolation(?ruleId, ?userId, ?timestamp) AS ?v) """.
                  
                  
                  
:check_contains_food_quantity_less_week a rr:Rule, rr:NonFixpointRule;
    rr:phase  10;
    rr:insert """ ?v :hasViolationRule ?rule;
                     :hasViolationUser ?user;
                     :hasViolationQuantity ?quantity;
					 :hasViolationConstraint ?operator;
					 :hasViolationEntityType ?et;
					 :hasViolationLevel ?level;
					 :hasViolationStartTime ?minTimestamp;
					 :hasViolationEndTime ?timestamp;
                     :hasTimestamp ?timestamp. """;
    rr:where  """ {
                    SELECT ?rule ?user ?et ?mv
                           (MAX(?mealTs) AS ?timestamp) (MIN(?mealTs) AS ?minTimestamp) (SUM(?entityAmount) AS ?quantity)
                    WHERE {
                      ?rule a :MonitoringRule;
                            :timing ?timing;
                            :command "contains";
                            :monitoredEntityType :Food;
                            :hasMonitoredValue ?mv;
                            :hasOperator ?operator;
                            :monitoredEntity ?class.
                      FILTER EXISTS {?rule :hasOperator "less"}
                      FILTER EXISTS {?rule :timing :Week}
                      {SELECT DISTINCT ?rule ?user WHERE { 
                      	{?rule :appliesTo ?user} UNION {?rule :appliesTo/(:containsUser|^:belongsProfile) ?user}}
					  }
                      ?meal :hasUser|^:consumed ?user;
                            :hasTimestamp ?mealTs.
                      { ?timing rdfs:subClassOf :Timespan } UNION { ?meal a ?timing }
					  BIND (:mintEntityType(?class) AS ?et)
                      ?cf   ^:hasConsumedFood ?meal; :hasFood ?food; :amountFood ?entityAmount.
                      ?food a ?class.
                    }
                    GROUP BY ?rule ?user ?et ?mv
                  }
				  ?rule :hasOperator ?operator.
				  { 
					?rule :hasMonitoredValue ?value. 
                  }
				  UNION 
 				  {
				    ?rule :hasMonitoredValueInterval ?interval.
                    ?interval :lowerBound ?lower;
                              :upperBound ?upper.
                  }
                  FILTER (?quantity > ?value)
                  ?rule :hasRuleId ?ruleId.
                  ?user :hasUserId ?userId.
                  BIND (:computeViolationLevel(?mv, ?quantity) AS ?level)
                  BIND (:mintViolation(?ruleId, ?userId, ?timestamp) AS ?v) """.
                  
                  
                  
:check_contains_food_portion_less_day a rr:Rule, rr:NonFixpointRule;
    rr:phase  10;
    rr:insert """ ?v :hasViolationRule ?rule;
                     :hasViolationUser ?user;
                     :hasViolationQuantity ?quantity;
					 :hasViolationConstraint ?operator;
					 :hasViolationEntityType ?et;
					 :hasViolationLevel ?level;
					 :hasViolationStartTime ?minTimestamp;
					 :hasViolationEndTime ?timestamp;
                     :hasTimestamp ?timestamp. """;
    rr:where  """ {
                    SELECT ?rule ?user ?et ?mv
                           (MAX(?mealTs) AS ?timestamp) (MIN(?mealTs) AS ?minTimestamp) (COUNT(DISTINCT ?cf) AS ?quantity)
                    WHERE {
                      ?rule a :MonitoringRule;
                            :timing ?timing;
                            :command "portion";
                            :monitoredEntityType :Food;
                            :hasMonitoredValue ?mv;
                            :monitoredEntity ?class.
                      FILTER EXISTS {?rule :hasOperator "less"}
                      FILTER EXISTS {?rule :timing :Day}
                      {SELECT DISTINCT ?rule ?user WHERE { 
                      	{?rule :appliesTo ?user} UNION {?rule :appliesTo/(:containsUser|^:belongsProfile) ?user}}
					  }
                      ?meal :hasUser|^:consumed ?user;
                            :hasTimestamp ?mealTs.
                      { ?timing rdfs:subClassOf :Timespan } UNION { ?meal a ?timing }
					  BIND (:mintEntityType(?class) AS ?et)
                      ?cf   ^:hasConsumedFood ?meal; :hasFood ?food.
                      ?food a ?class.
                    }
                    GROUP BY ?rule ?user ?et ?mv
                  }
				  ?rule :hasOperator ?operator.
				  { 
					?rule :hasMonitoredValue ?value. 
                  }
				  UNION 
 				  {
				    ?rule :hasMonitoredValueInterval ?interval.
                    ?interval :lowerBound ?lower;
                              :upperBound ?upper.
                  }
				  FILTER (?quantity > ?value)
                  ?rule :hasRuleId ?ruleId.
                  ?user :hasUserId ?userId.
                  BIND (:computeViolationLevel(?mv, ?quantity) AS ?level)
                  BIND (:mintViolation(?ruleId, ?userId, ?timestamp) AS ?v) """.

                  

:check_contains_food_portion_less_week a rr:Rule, rr:NonFixpointRule;
    rr:phase  10;
    rr:insert """ ?v :hasViolationRule ?rule;
                     :hasViolationUser ?user;
                     :hasViolationQuantity ?quantity;
					 :hasViolationConstraint ?operator;
					 :hasViolationEntityType ?et;
					 :hasViolationLevel ?level;
					 :hasViolationStartTime ?minTimestamp;
					 :hasViolationEndTime ?timestamp;
                     :hasTimestamp ?timestamp. """;
    rr:where  """ {
                    SELECT ?rule ?user ?et ?mv
                           (MAX(?mealTs) AS ?timestamp) (MIN(?mealTs) AS ?minTimestamp) (COUNT(DISTINCT ?cf) AS ?quantity)
                    WHERE {
                      ?rule a :MonitoringRule;
                            :timing ?timing;
                            :command "portion";
                            :monitoredEntityType :Food;
                            :hasMonitoredValue ?mv;
                            :monitoredEntity ?class.
                      FILTER EXISTS {?rule :hasOperator "less"}
                      FILTER EXISTS {?rule :timing :Week}
                      {SELECT DISTINCT ?rule ?user WHERE { 
                      	{?rule :appliesTo ?user} UNION {?rule :appliesTo/(:containsUser|^:belongsProfile) ?user}}
					  }
                      ?meal :hasUser|^:consumed ?user;
                            :hasTimestamp ?mealTs.
                      { ?timing rdfs:subClassOf :Timespan } UNION { ?meal a ?timing }
					  BIND (:mintEntityType(?class) AS ?et)
                      ?cf   ^:hasConsumedFood ?meal; :hasFood ?food.
                      ?food a ?class.
                    }
                    GROUP BY ?rule ?user ?et ?mv
                  }
				  ?rule :hasOperator ?operator.
				  { 
					?rule :hasMonitoredValue ?value. 
                  }
				  UNION 
 				  {
				    ?rule :hasMonitoredValueInterval ?interval.
                    ?interval :lowerBound ?lower;
                              :upperBound ?upper.
                  }
                  FILTER (?quantity > ?value)
                  ?rule :hasRuleId ?ruleId.
                  ?user :hasUserId ?userId.
                  BIND (:computeViolationLevel(?mv, ?quantity) AS ?level)
                  BIND (:mintViolation(?ruleId, ?userId, ?timestamp) AS ?v) """.  
                  
                  
#####################################################################################################################


:check_contains_food_quantity_less_interval_day a rr:Rule, rr:NonFixpointRule;
    rr:phase  10;
    rr:insert """ ?v :hasViolationRule ?rule;
                     :hasViolationUser ?user;
                     :hasViolationQuantity ?quantity;
					 :hasViolationConstraint ?operator;
					 :hasViolationEntityType ?et;
					 :hasViolationLevel ?level;
					 :hasViolationStartTime ?minTimestamp;
					 :hasViolationEndTime ?timestamp;
                     :hasTimestamp ?timestamp. """;
    rr:where  """ {
                    SELECT ?rule ?user ?et
                           (MAX(?mealTs) AS ?timestamp) (MIN(?mealTs) AS ?minTimestamp) (SUM(?entityAmount) AS ?quantity)
                    WHERE {
                      ?rule a :MonitoringRule;
                            :timing ?timing;
                            :command "contains";
                            :monitoredEntityType :Food;
                            :hasOperator ?operator;
                            :monitoredEntity ?class.
                      FILTER EXISTS {?rule :hasOperator "interval"}
                      FILTER EXISTS {?rule :timing :Day}
                      {SELECT DISTINCT ?rule ?user WHERE { 
                      	{?rule :appliesTo ?user} UNION {?rule :appliesTo/(:containsUser|^:belongsProfile) ?user}}
					  }
                      ?meal :hasUser|^:consumed ?user;
                            :hasTimestamp ?mealTs.
                      { ?timing rdfs:subClassOf :Timespan } UNION { ?meal a ?timing }
					  BIND (:mintEntityType(?class) AS ?et)
                      ?cf   ^:hasConsumedFood ?meal; :hasFood ?food; :amountFood ?entityAmount.
                      ?food a ?class.
                    }
                    GROUP BY ?rule ?user ?et
                  }
				  ?rule :hasOperator ?operator.
				  ?rule :hasMonitoredValueInterval ?interval.
                  ?interval :upperBound ?value.
                  FILTER (?quantity > ?value)
                  ?rule :hasRuleId ?ruleId.
                  ?user :hasUserId ?userId.
                  BIND (:computeViolationLevel(?value, ?quantity) AS ?level)
                  BIND (:mintViolation(?ruleId, ?userId, ?timestamp) AS ?v) """.
                  
                  
                  
:check_contains_food_quantity_less_interval_week a rr:Rule, rr:NonFixpointRule;
    rr:phase  10;
    rr:insert """ ?v :hasViolationRule ?rule;
                     :hasViolationUser ?user;
                     :hasViolationQuantity ?quantity;
					 :hasViolationConstraint ?operator;
					 :hasViolationEntityType ?et;
					 :hasViolationLevel ?level;
					 :hasViolationStartTime ?minTimestamp;
					 :hasViolationEndTime ?timestamp;
                     :hasTimestamp ?timestamp. """;
    rr:where  """ {
                    SELECT ?rule ?user ?et
                           (MAX(?mealTs) AS ?timestamp) (MIN(?mealTs) AS ?minTimestamp) (SUM(?entityAmount) AS ?quantity)
                    WHERE {
                      ?rule a :MonitoringRule;
                            :timing ?timing;
                            :command "contains";
                            :monitoredEntityType :Food;
                            :hasOperator ?operator;
                            :monitoredEntity ?class.
                      FILTER EXISTS {?rule :hasOperator "interval"}
                      FILTER EXISTS {?rule :timing :Week}
                      {SELECT DISTINCT ?rule ?user WHERE { 
                      	{?rule :appliesTo ?user} UNION {?rule :appliesTo/(:containsUser|^:belongsProfile) ?user}}
					  }
                      ?meal :hasUser|^:consumed ?user;
                            :hasTimestamp ?mealTs.
                      { ?timing rdfs:subClassOf :Timespan } UNION { ?meal a ?timing }
					  BIND (:mintEntityType(?class) AS ?et)
                      ?cf   ^:hasConsumedFood ?meal; :hasFood ?food; :amountFood ?entityAmount.
                      ?food a ?class.
                    }
                    GROUP BY ?rule ?user ?et
                  }
				  ?rule :hasOperator ?operator.
				  ?rule :hasMonitoredValueInterval ?interval.
                  ?interval :upperBound ?value.
                  FILTER (?quantity > ?value)
                  ?rule :hasRuleId ?ruleId.
                  ?user :hasUserId ?userId.
                  BIND (:computeViolationLevel(?value, ?quantity) AS ?level)
                  BIND (:mintViolation(?ruleId, ?userId, ?timestamp) AS ?v) """.
                  
                  
                  
:check_contains_food_portion_less_interval_day a rr:Rule, rr:NonFixpointRule;
    rr:phase  10;
    rr:insert """ ?v :hasViolationRule ?rule;
                     :hasViolationUser ?user;
                     :hasViolationQuantity ?quantity;
					 :hasViolationConstraint ?operator;
					 :hasViolationEntityType ?et;
					 :hasViolationLevel ?level;
					 :hasViolationStartTime ?minTimestamp;
					 :hasViolationEndTime ?timestamp;
                     :hasTimestamp ?timestamp. """;
    rr:where  """ {
                    SELECT ?rule ?user ?et
                           (MAX(?mealTs) AS ?timestamp) (MIN(?mealTs) AS ?minTimestamp) (COUNT(DISTINCT ?cf) AS ?quantity)
                    WHERE {
                      ?rule a :MonitoringRule;
                            :timing ?timing;
                            :command "portion";
                            :monitoredEntityType :Food;
                            :monitoredEntity ?class.
                      FILTER EXISTS {?rule :hasOperator "interval"}
                      FILTER EXISTS {?rule :timing :Day}
                      {SELECT DISTINCT ?rule ?user WHERE { 
                      	{?rule :appliesTo ?user} UNION {?rule :appliesTo/(:containsUser|^:belongsProfile) ?user}}
					  }
                      ?meal :hasUser|^:consumed ?user;
                            :hasTimestamp ?mealTs.
                      { ?timing rdfs:subClassOf :Timespan } UNION { ?meal a ?timing }
					  BIND (:mintEntityType(?class) AS ?et)
                      ?cf   ^:hasConsumedFood ?meal; :hasFood ?food.
                      ?food a ?class.
                    }
                    GROUP BY ?rule ?user ?et
                  }
				  ?rule :hasOperator ?operator.
				  ?rule :hasMonitoredValueInterval ?interval.
                  ?interval :upperBound ?value.
				  FILTER (?quantity > ?value)
                  ?rule :hasRuleId ?ruleId.
                  ?user :hasUserId ?userId.
                  BIND (:computeViolationLevel(?value, ?quantity) AS ?level)
                  BIND (:mintViolation(?ruleId, ?userId, ?timestamp) AS ?v) """.

                  

:check_contains_food_portion_less_interval_week a rr:Rule, rr:NonFixpointRule;
    rr:phase  10;
    rr:insert """ ?v :hasViolationRule ?rule;
                     :hasViolationUser ?user;
                     :hasViolationQuantity ?quantity;
					 :hasViolationConstraint ?operator;
					 :hasViolationEntityType ?et;
					 :hasViolationLevel ?level;
					 :hasViolationStartTime ?minTimestamp;
					 :hasViolationEndTime ?timestamp;
                     :hasTimestamp ?timestamp. """;
    rr:where  """ {
                    SELECT ?rule ?user ?et
                           (MAX(?mealTs) AS ?timestamp) (MIN(?mealTs) AS ?minTimestamp) (COUNT(DISTINCT ?cf) AS ?quantity)
                    WHERE {
                      ?rule a :MonitoringRule;
                            :timing ?timing;
                            :command "portion";
                            :monitoredEntityType :Food;
                            :monitoredEntity ?class.
                      FILTER EXISTS {?rule :hasOperator "interval"}
                      FILTER EXISTS {?rule :timing :Week}
                      {SELECT DISTINCT ?rule ?user WHERE { 
                      	{?rule :appliesTo ?user} UNION {?rule :appliesTo/(:containsUser|^:belongsProfile) ?user}}
					  }
                      ?meal :hasUser|^:consumed ?user;
                            :hasTimestamp ?mealTs.
                      { ?timing rdfs:subClassOf :Timespan } UNION { ?meal a ?timing }
					  BIND (:mintEntityType(?class) AS ?et)
                      ?cf   ^:hasConsumedFood ?meal; :hasFood ?food.
                      ?food a ?class.
                    }
                    GROUP BY ?rule ?user ?et
                  }
				  ?rule :hasOperator ?operator.
				  ?rule :hasMonitoredValueInterval ?interval.
                  ?interval :upperBound ?value.
                  FILTER (?quantity > ?value)
                  ?rule :hasRuleId ?ruleId.
                  ?user :hasUserId ?userId.
                  BIND (:computeViolationLevel(?value, ?quantity) AS ?level)
                  BIND (:mintViolation(?ruleId, ?userId, ?timestamp) AS ?v) """.          